AWSTemplateFormatVersion: 2010-09-09
Description: "for production/test and public/private"
Parameters:
  Instancetype:
    Type : String 
    Description: "dess"
    Default: t2.micro
  Mykey:
    Description: "MY KEY"
    Type: AWS::EC2::KeyPair::KeyName
    Default: "yasser"
  Env:
    Description: "Deployment Environment"
    Type : String 
    Default: "Test"
    AllowedValues:
      - Test
      - Prod
  NetMode:
    Description: "public or private"
    Type: String
    Default: "Public"
    AllowedValues:
      - Public
      - Private
  AMID:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  Message:
    Description: "Message for HTML page"
    Default: "Test1"
    Type: "String"
Conditions:
  IsProduction: !Equals 
    - !Ref Env
    - Prod
  IsTest : !Equals 
    - !Ref Env
    - Test
  IsPublic: !Equals
    - !Ref NetMode
    - Public
  IsPrivate: !Equals
    - !Ref NetMode
    - Private
Resources:
  TestVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "172.20.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
  IGW:
    Type: AWS::EC2::InternetGateway
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestVPC
      InternetGatewayId: !Ref IGW
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH and HTTP access via port 22 IPv4 & port 80 IPv4
      VpcId: !Ref TestVPC
      SecurityGroupIngress:
        - Description: "Allow SSH IPv4 IN"
          IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        - Description: "Allow HTTP IPv4 IN"
          IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVPC
  Subnet1Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
  Subnet2Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [3, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
  Subnet3Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [5, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
  Subnet1PrivateRouteableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1Private
      RouteTableId: !Ref PrivateRouteTable
  Subnet2PrivateRouteableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2Private
      RouteTableId: !Ref PrivateRouteTable
  Subnet3PrivateRouteableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3Private
      RouteTableId: !Ref PrivateRouteTable
  PrivateInstance:
    Type: AWS::EC2::Instance
    Condition: IsPrivate
    Metadata:
      'AWS::CloudFormation::Init':
        configSets: 
          default: 
            - "seting-cfhup"
        seting-cfhup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
                verbose=true
              mode: '000400'
              owner: 'root'
              group: 'root'
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: 'root'
              group: 'root'
          commands:
            requiredonly:
              command: "/bin/echo -n "
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf               
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M    
    Properties:
      InstanceType: !Ref Instancetype
      ImageId: !Ref AMID
      KeyName: !Ref Mykey
#      SubnetId: !Ref subnet1
#      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      SecurityGroupIds: !
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref Subnet1Private      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVPC
  PublicRouteTableRule:
    Type: AWS::EC2::Route
    DependsOn: 
      - IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  Subnet1Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [0, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
  Subnet2Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [2, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
  Subnet3Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [4, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
  Subnet1PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1Public
      RouteTableId: !Ref PublicRouteTable
  Subnet2PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2Public
      RouteTableId: !Ref PublicRouteTable
  Subnet3PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3Public
      RouteTableId: !Ref PublicRouteTable
  PublicInstance:
    Type: AWS::EC2::Instance
    Condition: IsPublic
    Metadata:
      'AWS::CloudFormation::Init':
        configSets: 
          default: 
            - "seting-cfhup"
            - "setting-website"
        seting-cfhup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
                verbose=true
              mode: '000400'
              owner: 'root'
              group: 'root'
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: 'root'
              group: 'root'
          commands:
            requiredonly:
              command: "/bin/echo -n "
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf               
        setting-website: 
          packages:
            yum:
              httpd: []
              tmux: [] 
          sources:
            /var/www/html:   https://github.com/yasser-alhawary/cloudformation/tarball/v1.0
          files:
            /var/www/html/index.html:
              content: !Sub |
                <html><head><title>Amazing test page</title></head><body><h1><center>${Message}"asdasd"</center></h1></body></html> 
          commands:
            setperm:
              command: "chown -R apache:apache /var/www/html"          
          services:                      
            systemd:                 
              httpd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/var/www/html/index.html"
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M    
    Properties:
      InstanceType: !Ref Instancetype
      ImageId: !Ref AMID
      KeyName: !Ref Mykey
#      SubnetId: !Ref subnet1
#      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref Subnet1Public     
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance

#  EIP:
#    Type: AWS::EC2::EIP
#    Condition: IsPublic
#    DependsOn: 
#      - IGWAttachment
#    Properties: 
#      Domain: vpc
#  IPAssoc:
#    Type: AWS::EC2::EIPAssociation
#    Condition: IsPublic
#    Properties:
#      InstanceId: !Ref PublicInstance
#      EIP: !Ref EIP