AWSTemplateFormatVersion: 2010-09-09
Description: "for production/test and public/private"
Parameters:
  VPCCIDR:
    Description: "Enter The VPC CIDR"
    Type: String
    Default: "172.25.0.0/16"
    AllowedValues:
      - 10.0.0.0/16
      - 10.10.0.0/16
      - 172.20.0.0/16
      - 172.25.0.0/16
Resources:
  TestVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestVPC
      InternetGatewayId: !Ref IGW
     
  HTTPSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP access via port 80 IPv4
      VpcId: !Ref TestVPC
      SecurityGroupIngress:
        - Description: "Allow HTTP IPv4 IN"
          IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  SSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access via port 22 IPv4
      VpcId: !Ref TestVPC
      SecurityGroupIngress:
        - Description: "Allow SSH IPv4 IN"
          IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  SecurityGroupTrustALBOnly:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow Traffic From ALB Port 80
      VpcId: !Ref TestVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  SecurityGroupForHTTPS:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: Enable HTTPS access via port 443 IPv4
        VpcId: !Ref TestVPC
        SecurityGroupIngress:
          - Description: "Allow HTTPS IPv4 IN"
            IpProtocol: tcp
            FromPort: "443"
            ToPort: "443"
            CidrIp: "0.0.0.0/0"
        Tags:
          - Key: StackName
            Value: !Ref AWS::StackName
  ALBRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow ALB SG To Port 80"
      GroupId: !Ref SecurityGroupTrustALBOnly
      SourceSecurityGroupId: !Ref   SecurityGroupForHTTPS
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80 
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  Subnet1Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [0, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  Subnet2Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  Subnet3Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [2, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  Subnet1PrivateRouteableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1Private
      RouteTableId: !Ref PrivateRouteTable
  Subnet2PrivateRouteableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2Private
      RouteTableId: !Ref PrivateRouteTable
  Subnet3PrivateRouteableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3Private
      RouteTableId: !Ref PrivateRouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  PublicRouteTableRule:
    Type: AWS::EC2::Route
    DependsOn: 
      - IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  Subnet1Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [3, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  Subnet2Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [4, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  Subnet3Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ]
      VpcId: !Ref TestVPC
      CidrBlock: !Select [5, !Cidr [!GetAtt TestVPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  Subnet1PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1Public
      RouteTableId: !Ref PublicRouteTable
  Subnet2PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2Public
      RouteTableId: !Ref PublicRouteTable
  Subnet3PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3Public
      RouteTableId: !Ref PublicRouteTable
Outputs:
  VPC:
    Description: VPC
    Value: !Ref TestVPC
    Export: 
      Name: VPCID
  PrivateSubnet1:
    Description: 1st Private Subnet
    Value: !Ref Subnet1Private
    Export: 
      Name: PriSub1
  PrivateSubnet2:
    Description: 2nd Private Subnet
    Value: !Ref Subnet2Private
    Export: 
      Name: PriSub2
  PrivateSubnet3:
    Description: 3rd Private Subnet
    Value: !Ref Subnet3Private
    Export: 
      Name: PriSub3
  PublicSubnet1:
    Description: 1st Public Subnet
    Value: !Ref Subnet1Public
    Export: 
      Name: PubSub1
  PublicSubnet2:
    Description: 2nd Public Subnet
    Value: !Ref Subnet2Public
    Export: 
      Name: PubSub2
  PublicSubnet3:
    Description: 3rd Public Subnet
    Value: !Ref Subnet3Public
    Export: 
      Name: PubSub3
  SecurityGroupForSSH:
    Description: SSH Security Group
    Value: !Ref SSHSecurityGroup
    Export: 
      Name: SSH
  SecurityGroupForHTTP:
    Description: HTTP Security Group
    Value: !Ref HTTPSecurityGroup
    Export: 
      Name: HTTP
  SecurityGroupForHTTPS:
    Description: HTTPS Security Group For ALB
    Value: !Ref SecurityGroupForHTTPS
    Export: 
      Name: HTTPS
  SecurityGroupHTTPFromALB:
    Description: HTTP Security Group From ALB Only
    Value: !Ref SecurityGroupTrustALBOnly
    Export: 
      Name: HTTPFromALB

#  EIP:
#    Type: AWS::EC2::EIP
#    Condition: IsPublic
#    DependsOn: 
#      - IGWAttachment
#    Properties: 
#      Domain: vpc
#  IPAssoc:
#    Type: AWS::EC2::EIPAssociation
#    Condition: IsPublic
#    Properties:
#      InstanceId: !Ref PublicInstance
#      EIP: !Ref EIP